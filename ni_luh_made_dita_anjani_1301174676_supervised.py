# -*- coding: utf-8 -*-
"""Ni Luh Made Dita Anjani_1301174676_Supervised.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15xTSRqgTu9YzcKii0FJ3lMYLC5Jp-tfs

# Ni Luh Made Dita Anjani
1301174676

IFIK-41-01

# Classification
"""

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt

"""KNeighbors Classifier"""

from google.colab import files
uploaded_cluster = files.upload()

import io
data = pd.read_csv(io.BytesIO(uploaded_cluster['clustering_result_data.csv']))

data.head()

"""Disini akan digunakan 2 metode untuk mencari akurasi, untuk mencari metode mana yang menghasilkan akurasi lebih besar

Splitting data dan menghitung accuracy dengan  menggunakan KNN
"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

X = data.iloc[:, :].values
y = data.iloc[:, 13].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
print('Accuracy of K-NN classifier on training set: {:.5f}'
     .format(knn.score(X_train, y_train)))
print('Accuracy of K-NN classifier on test set: {:.5f}'

     .format(knn.score(X_test, y_test)))

from sklearn.neighbors import KNeighborsClassifier
k_range = range(1,20)
scores = []
for k in k_range:
  knn = KNeighborsClassifier(n_neighbors = k)
  knn.fit(X_train, y_train)
  scores.append(knn.score(X_test, y_test))
plt.figure()
plt.xlabel('k')
plt.ylabel('accuracy')
plt.scatter(k_range, scores)
plt.xticks([0,5,10,15,20])

"""Splitting data dan menghitung accuracy dengan menggunakan Gaussian"""

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn import metrics
X = data.iloc[:, :].values
y = data.iloc[:, 13].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)
gnb = GaussianNB()
gnb.fit(X_train, y_train)
y_pred = gnb.predict(X_test)
print("Accuracy:", metrics.accuracy_score(y_test, y_pred)*100, '%')
print('\n')
print(confusion_matrix(y_test, y_pred))
print('\n')
print("Classification report")
print(classification_report(y_test,y_pred))

"""Ternyata setelah menggunakan kedua algoritma diatas (KNN / Gaussian) dapat disimpulkan untuk data dan metode yang saya gunakan lebih cocok menggunakan metode classificaation Gaussian, karena accuracynya lebih besar dibandingkan dengan KNN."""